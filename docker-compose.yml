services:
  web:
    image: nginx
    volumes:
      - ./.docker/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./drupal:/var/www/html
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_web.rule=Host(`${PROJECT_BASE_URL}`)"
    restart: always
    depends_on:
      - php
      - db
      - redis
  php:
    build: .docker
    restart: always
    volumes:
      - ./.docker/conf/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./.docker/conf/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./drupal:/var/www/html
    environment:
      PHP_IDE_CONFIG: "serverName=Xdebug_server"
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
  traefik:
    image: traefik:v2.2
    command:
      - "--providers.docker"
      - "--accesslog=true"
      - "--api.insecure=true"
      - "--accesslog.filePath=/logs/access.log"
    ports:
      - "${PROJECT_PORT}:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs/:/logs/
  varnish:
    depends_on:
      - web
    image: varnish:6.0
    volumes:
      - .docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"
  redis:
    image: redis:latest
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - redis:/bitnami/redis/data
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ports:
      - 9001:9000
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_sonarqube.rule=Host(`sonarqube.${PROJECT_BASE_URL}`)"
      - "traefik.http.services.${PROJECT_NAME}_sonarqube.loadbalancer.server.port=9000"
    ulimits:
      memlock:
        soft: -1
        hard: -1
  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    depends_on:
      - sonarqube
    volumes:
      - .:/usr/src
  ftpd-server:
    image: stilliard/pure-ftpd:hardened
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - './ftp/data:/home/username/'
      - './ftp/pass:/etc/pure-ftpd/passwd'
    environment:
      FTP_USER_NAME: "username"
      FTP_USER_PASS: "changeme!"
      FTP_USER_HOME: "/home/username"
    restart: always

  filebrowser:
    image: filebrowser/filebrowser
    container_name: filebrowser
    environment:
      PUID: 1000
      PGID: 1000
    ports:
      - "8080:80"
    volumes:
      - ./ftp/data:/srv
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_filebrowser.rule=Host(`filebrowser.${PROJECT_BASE_URL}`)"
    restart: unless-stopped

  solr:
    image: wodby/solr:$SOLR_TAG
    container_name: "${PROJECT_NAME}_solr"
    environment:
      SOLR_DEFAULT_CONFIG_SET: $SOLR_CONFIG_SET
      ZK_HOST: zookeeper:2181
      SOLR_HEAP: 1024m
    depends_on:
    - zookeeper
    labels:
    - "traefik.http.services.${PROJECT_NAME}_solr.loadbalancer.server.port=8983"
    - "traefik.http.routers.${PROJECT_NAME}_solr.rule=Host(`solr.${PROJECT_BASE_URL}`)"

  zookeeper:
    image: zookeeper:$ZOOKEEPER_TAG
    container_name: "${PROJECT_NAME}_zookeeper"
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=zookeeper:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: mntr, conf, ruok
  xhprof:
    image: wodby/xhprof:$XHPROF_TAG
    container_name: "${PROJECT_NAME}_xhprof"
    restart: always
    volumes:
    - files:/mnt/files
    labels:
    - "traefik.http.routers.${PROJECT_NAME}_xhprof.rule=Host(`xhprof.${PROJECT_BASE_URL}`)"

volumes:
  postgres-data: {}
  redis: {}
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
  files:
