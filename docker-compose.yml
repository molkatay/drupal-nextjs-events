services:
  web:
    image: nginx
    volumes:
      - ./.docker/conf/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./drupal:/var/www/html
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_web.rule=Host(`${PROJECT_BASE_URL}`)"
    restart: always
    depends_on:
      - php
      - db
      - redis
  php:
    build: .docker
    restart: always
    volumes:
      - ./.docker/conf/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./.docker/conf/php/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - ./drupal:/var/www/html
    environment:
      PHP_IDE_CONFIG: "serverName=Xdebug_server"
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
 #     - ./.docker/conf/postgres/:/docker-entrypoint-initdb.d/
      - postgres-data:/var/lib/postgresql/data
  traefik:
    image: traefik:v2.2
    command:
      - "--providers.docker"
      - "--accesslog=true"
      - "--api.insecure=true"
      - "--accesslog.filePath=/logs/access.log"
    ports:
      - "${PROJECT_PORT}:80"
     # - '8080:8080' # Dashboard
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./logs/:/logs/
  chrome:
    image: selenium/standalone-chrome:3.141
    container_name: "${PROJECT_NAME}_chrome"
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - "4444:4444"
    entrypoint:
      - chromedriver
      - "--no-sandbox"
      - "--disable-dev-shm-usage"
      - "--log-path=/tmp/chromedriver.log"
      - "--verbose"
      - "--whitelisted-ips="

  varnish:
    depends_on:
      - web
    image: varnish:6.0
    volumes:
      - .docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
    labels:
      - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"
  redis:
    image: redis:latest
    tty: true
    ports:
      - "6379:6379"
    volumes:
      - redis:/bitnami/redis/data
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'


  sonarqube:
      image: sonarqube:lts-community
      depends_on:
        - sonar_db
      environment:
        SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
        SONAR_JDBC_USERNAME: sonar
        SONAR_JDBC_PASSWORD: sonar
      volumes:
        - sonarqube_conf:/opt/sonarqube/conf
        - sonarqube_data:/opt/sonarqube/data
        - sonarqube_extensions:/opt/sonarqube/extensions
        - sonarqube_logs:/opt/sonarqube/logs
        - sonarqube_temp:/opt/sonarqube/temp
      ports:
        - 9001:9000

      labels:
        - "traefik.http.routers.${PROJECT_NAME}_sonarqube.rule=Host(`sonarqube.${PROJECT_BASE_URL}`)"
        - "traefik.http.services.${PROJECT_NAME}_sonarqube.loadbalancer.server.port=9000"
      ulimits:
        memlock:
          soft: -1
          hard: -1
  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    depends_on:
      - sonarqube
    volumes:
      - .:/usr/src
volumes:
  postgres-data: {}
  redis: {}
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
